% rebase('layout.tpl', title='Home Page', year=year)
<br>
<div class="text-dec t-n">
    При помощи нашего ресурса вы можете «поэкспериментировать» с графами. Используя 3 алгоритма нахождения остовного
    дерева. Благодаря удобному интерфейсу, взаимодействие с объектами не доставляет дискомфорта.
    <br>
    <br>
    <div class="text-dec t-l">
        Остовное дерево
    </div>
    <a href="https://ru.wikipedia.org/wiki/Остовное_дерево">Остовное дерево графа</a> (англ. Spanning tree) — это
    дерево, подграф данного графа, с тем же числом вершин, что и у исходного графа.
    Неформально говоря, остовное дерево получается из исходного графа удалением максимального числа рёбер, входящих в
    циклы, но без нарушения связности графа. Остовное дерево включает в себя все n вершин исходного графа и содержит n-1
    ребро.
    <br><br><br>
    <div class="text-dec t-l">
        Алгоритмы поиска
    </div>
    <div class="index-elem">
        <img src="../static/content/gifs/Breadth-First-Search-Algorithm.gif" alt="Breadth First Search Algorithm"
             width="250" align="right"> <a href="/bfs">Поиск в ширину </a>(англ. breadth-first
        search, BFS) — один из методов обхода графа. Пусть задан граф G=(V, E) и выделена исходная вершина s. Алгоритм
        поиска в ширину систематически обходит все ребра G для «открытия» всех вершин, достижимых из s, вычисляя при
        этом расстояние (минимальное количество рёбер) от s до каждой достижимой из s вершины. Алгоритм работает как для
        ориентированных, так и для неориентированных графов.
    </div>
    <br><br><br>
    <div class="index-elem">
        <img src="../static/content/gifs/Depth-First-Search.gif" alt="Depth First Search algorithm" width="250"
             align="right">
        <a href="/bfs">Поиск в глубину </a>(англ.Depth-first search, DFS) — один из методов обхода графа. Стратегия
        поиска в глубину, как и следует из названия, состоит в том, чтобы идти «вглубь» графа, насколько это возможно.
        Алгоритм поиска описывается рекурсивно: перебираем все исходящие из рассматриваемой вершины рёбра. Если ребро
        ведёт в вершину, которая не была рассмотрена ранее, то запускаем алгоритм от этой нерассмотренной вершины, а
        после возвращаемся и продолжаем перебирать рёбра. Возврат происходит в том случае, если в рассматриваемой
        вершине не осталось рёбер, которые ведут в нерассмотренную вершину. Если после завершения алгоритма не все
        вершины были рассмотрены, то необходимо запустить алгоритм от одной из нерассмотренных вершин.
    </div>
    <br><br><br>
    <div class="index-elem">
        <img src="../static/content/gifs/KruskalDemo.gif" alt="Kruskal's algorithm" width="250" align="right">
        <a href="/kruskal">Алгоритм Краскала</a> — эффективный алгоритм построения минимального
        остовного дерева взвешенного связного неориентированного графа. Также алгоритм используется для нахождения
        некоторых приближений для задачи Штейнера.
    </div>
</div>